// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	"github.com/egosha7/goph-keeper/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// AddCard mocks base method.
func (m *MockServices) AddCard(login, cardName, numberCard, expiryDateCard, cvvCard string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCard", login, cardName, numberCard, expiryDateCard, cvvCard)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCard indicates an expected call of AddCard.
func (mr *MockServicesMockRecorder) AddCard(login, cardName, numberCard, expiryDateCard, cvvCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockServices)(nil).AddCard), login, cardName, numberCard, expiryDateCard, cvvCard)
}

// AddPassword mocks base method.
func (m *MockServices) AddPassword(login, passName, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPassword", login, passName, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPassword indicates an expected call of AddPassword.
func (mr *MockServicesMockRecorder) AddPassword(login, passName, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPassword", reflect.TypeOf((*MockServices)(nil).AddPassword), login, passName, password)
}

// AuthenticateUser mocks base method.
func (m *MockServices) AuthenticateUser(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockServicesMockRecorder) AuthenticateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockServices)(nil).AuthenticateUser), user)
}

// CheckPinCode mocks base method.
func (m *MockServices) CheckPinCode(login, pin string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPinCode", login, pin)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPinCode indicates an expected call of CheckPinCode.
func (mr *MockServicesMockRecorder) CheckPinCode(login, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPinCode", reflect.TypeOf((*MockServices)(nil).CheckPinCode), login, pin)
}

// GetCard mocks base method.
func (m *MockServices) GetCard(login, cardName string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", login, cardName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetCard indicates an expected call of GetCard.
func (mr *MockServicesMockRecorder) GetCard(login, cardName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockServices)(nil).GetCard), login, cardName)
}

// GetCardNameList mocks base method.
func (m *MockServices) GetCardNameList(login string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardNameList", login)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardNameList indicates an expected call of GetCardNameList.
func (mr *MockServicesMockRecorder) GetCardNameList(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardNameList", reflect.TypeOf((*MockServices)(nil).GetCardNameList), login)
}

// GetPassword mocks base method.
func (m *MockServices) GetPassword(login, passName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", login, passName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockServicesMockRecorder) GetPassword(login, passName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockServices)(nil).GetPassword), login, passName)
}

// GetPasswordNameList mocks base method.
func (m *MockServices) GetPasswordNameList(login string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordNameList", login)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordNameList indicates an expected call of GetPasswordNameList.
func (mr *MockServicesMockRecorder) GetPasswordNameList(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordNameList", reflect.TypeOf((*MockServices)(nil).GetPasswordNameList), login)
}

// RegisterUser mocks base method.
func (m *MockServices) RegisterUser(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockServicesMockRecorder) RegisterUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockServices)(nil).RegisterUser), user)
}
